/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package com.gallegos.shop.domain.generated;

import org.apache.avro.specific.SpecificData;
import org.apache.avro.util.Utf8;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

@org.apache.avro.specific.AvroGenerated
public class ShopOrder extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = -2781403973506584475L;


  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"ShopOrder\",\"namespace\":\"com.gallegos.shop.domain.generated\",\"fields\":[{\"name\":\"id\",\"type\":{\"type\":\"string\",\"logicalType\":\"uuid\"}},{\"name\":\"nameShop\",\"type\":\"string\"},{\"name\":\"address\",\"type\":\"string\"},{\"name\":\"city\",\"type\":\"string\"},{\"name\":\"cp\",\"type\":\"string\"},{\"name\":\"client\",\"type\":{\"type\":\"record\",\"name\":\"Client\",\"fields\":[{\"name\":\"id\",\"type\":{\"type\":\"string\",\"logicalType\":\"uuid\"}},{\"name\":\"name\",\"type\":\"string\"},{\"name\":\"cardNumber\",\"type\":\"int\"}]}},{\"name\":\"items\",\"type\":{\"type\":\"array\",\"items\":{\"type\":\"record\",\"name\":\"Item\",\"fields\":[{\"name\":\"id\",\"type\":{\"type\":\"string\",\"logicalType\":\"uuid\"}},{\"name\":\"name\",\"type\":\"string\"},{\"name\":\"quantity\",\"type\":\"int\"},{\"name\":\"price\",\"type\":\"float\"}]}}},{\"name\":\"totalPrice\",\"type\":\"float\"}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static final SpecificData MODEL$ = new SpecificData();
  static {
    MODEL$.addLogicalTypeConversion(new org.apache.avro.Conversions.UUIDConversion());
  }

  private static final BinaryMessageEncoder<ShopOrder> ENCODER =
      new BinaryMessageEncoder<>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<ShopOrder> DECODER =
      new BinaryMessageDecoder<>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageEncoder instance used by this class.
   * @return the message encoder used by this class
   */
  public static BinaryMessageEncoder<ShopOrder> getEncoder() {
    return ENCODER;
  }

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   * @return the message decoder used by this class
   */
  public static BinaryMessageDecoder<ShopOrder> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   * @return a BinaryMessageDecoder instance for this class backed by the given SchemaStore
   */
  public static BinaryMessageDecoder<ShopOrder> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<>(MODEL$, SCHEMA$, resolver);
  }

  /**
   * Serializes this ShopOrder to a ByteBuffer.
   * @return a buffer holding the serialized data for this instance
   * @throws java.io.IOException if this instance could not be serialized
   */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /**
   * Deserializes a ShopOrder from a ByteBuffer.
   * @param b a byte buffer holding serialized data for an instance of this class
   * @return a ShopOrder instance decoded from the given buffer
   * @throws java.io.IOException if the given bytes could not be deserialized into an instance of this class
   */
  public static ShopOrder fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

  private java.util.UUID id;
  private java.lang.CharSequence nameShop;
  private java.lang.CharSequence address;
  private java.lang.CharSequence city;
  private java.lang.CharSequence cp;
  private com.gallegos.shop.domain.generated.Client client;
  private java.util.List<com.gallegos.shop.domain.generated.Item> items;
  private float totalPrice;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public ShopOrder() {}

  /**
   * All-args constructor.
   * @param id The new value for id
   * @param nameShop The new value for nameShop
   * @param address The new value for address
   * @param city The new value for city
   * @param cp The new value for cp
   * @param client The new value for client
   * @param items The new value for items
   * @param totalPrice The new value for totalPrice
   */
  public ShopOrder(java.util.UUID id, java.lang.CharSequence nameShop, java.lang.CharSequence address, java.lang.CharSequence city, java.lang.CharSequence cp, com.gallegos.shop.domain.generated.Client client, java.util.List<com.gallegos.shop.domain.generated.Item> items, java.lang.Float totalPrice) {
    this.id = id;
    this.nameShop = nameShop;
    this.address = address;
    this.city = city;
    this.cp = cp;
    this.client = client;
    this.items = items;
    this.totalPrice = totalPrice;
  }

  @Override
  public org.apache.avro.specific.SpecificData getSpecificData() { return MODEL$; }

  @Override
  public org.apache.avro.Schema getSchema() { return SCHEMA$; }

  // Used by DatumWriter.  Applications should not call.
  @Override
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return id;
    case 1: return nameShop;
    case 2: return address;
    case 3: return city;
    case 4: return cp;
    case 5: return client;
    case 6: return items;
    case 7: return totalPrice;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  private static final org.apache.avro.Conversion<?>[] conversions =
      new org.apache.avro.Conversion<?>[] {
      new org.apache.avro.Conversions.UUIDConversion(),
      null,
      null,
      null,
      null,
      null,
      null,
      null,
      null
  };

  @Override
  public org.apache.avro.Conversion<?> getConversion(int field) {
    return conversions[field];
  }

  // Used by DatumReader.  Applications should not call.
  @Override
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: id = (java.util.UUID)value$; break;
    case 1: nameShop = (java.lang.CharSequence)value$; break;
    case 2: address = (java.lang.CharSequence)value$; break;
    case 3: city = (java.lang.CharSequence)value$; break;
    case 4: cp = (java.lang.CharSequence)value$; break;
    case 5: client = (com.gallegos.shop.domain.generated.Client)value$; break;
    case 6: items = (java.util.List<com.gallegos.shop.domain.generated.Item>)value$; break;
    case 7: totalPrice = (java.lang.Float)value$; break;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  /**
   * Gets the value of the 'id' field.
   * @return The value of the 'id' field.
   */
  public java.util.UUID getId() {
    return id;
  }


  /**
   * Sets the value of the 'id' field.
   * @param value the value to set.
   */
  public void setId(java.util.UUID value) {
    this.id = value;
  }

  /**
   * Gets the value of the 'nameShop' field.
   * @return The value of the 'nameShop' field.
   */
  public java.lang.CharSequence getNameShop() {
    return nameShop;
  }


  /**
   * Sets the value of the 'nameShop' field.
   * @param value the value to set.
   */
  public void setNameShop(java.lang.CharSequence value) {
    this.nameShop = value;
  }

  /**
   * Gets the value of the 'address' field.
   * @return The value of the 'address' field.
   */
  public java.lang.CharSequence getAddress() {
    return address;
  }


  /**
   * Sets the value of the 'address' field.
   * @param value the value to set.
   */
  public void setAddress(java.lang.CharSequence value) {
    this.address = value;
  }

  /**
   * Gets the value of the 'city' field.
   * @return The value of the 'city' field.
   */
  public java.lang.CharSequence getCity() {
    return city;
  }


  /**
   * Sets the value of the 'city' field.
   * @param value the value to set.
   */
  public void setCity(java.lang.CharSequence value) {
    this.city = value;
  }

  /**
   * Gets the value of the 'cp' field.
   * @return The value of the 'cp' field.
   */
  public java.lang.CharSequence getCp() {
    return cp;
  }


  /**
   * Sets the value of the 'cp' field.
   * @param value the value to set.
   */
  public void setCp(java.lang.CharSequence value) {
    this.cp = value;
  }

  /**
   * Gets the value of the 'client' field.
   * @return The value of the 'client' field.
   */
  public com.gallegos.shop.domain.generated.Client getClient() {
    return client;
  }


  /**
   * Sets the value of the 'client' field.
   * @param value the value to set.
   */
  public void setClient(com.gallegos.shop.domain.generated.Client value) {
    this.client = value;
  }

  /**
   * Gets the value of the 'items' field.
   * @return The value of the 'items' field.
   */
  public java.util.List<com.gallegos.shop.domain.generated.Item> getItems() {
    return items;
  }


  /**
   * Sets the value of the 'items' field.
   * @param value the value to set.
   */
  public void setItems(java.util.List<com.gallegos.shop.domain.generated.Item> value) {
    this.items = value;
  }

  /**
   * Gets the value of the 'totalPrice' field.
   * @return The value of the 'totalPrice' field.
   */
  public float getTotalPrice() {
    return totalPrice;
  }


  /**
   * Sets the value of the 'totalPrice' field.
   * @param value the value to set.
   */
  public void setTotalPrice(float value) {
    this.totalPrice = value;
  }

  /**
   * Creates a new ShopOrder RecordBuilder.
   * @return A new ShopOrder RecordBuilder
   */
  public static com.gallegos.shop.domain.generated.ShopOrder.Builder newBuilder() {
    return new com.gallegos.shop.domain.generated.ShopOrder.Builder();
  }

  /**
   * Creates a new ShopOrder RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new ShopOrder RecordBuilder
   */
  public static com.gallegos.shop.domain.generated.ShopOrder.Builder newBuilder(com.gallegos.shop.domain.generated.ShopOrder.Builder other) {
    if (other == null) {
      return new com.gallegos.shop.domain.generated.ShopOrder.Builder();
    } else {
      return new com.gallegos.shop.domain.generated.ShopOrder.Builder(other);
    }
  }

  /**
   * Creates a new ShopOrder RecordBuilder by copying an existing ShopOrder instance.
   * @param other The existing instance to copy.
   * @return A new ShopOrder RecordBuilder
   */
  public static com.gallegos.shop.domain.generated.ShopOrder.Builder newBuilder(com.gallegos.shop.domain.generated.ShopOrder other) {
    if (other == null) {
      return new com.gallegos.shop.domain.generated.ShopOrder.Builder();
    } else {
      return new com.gallegos.shop.domain.generated.ShopOrder.Builder(other);
    }
  }

  /**
   * RecordBuilder for ShopOrder instances.
   */
  @org.apache.avro.specific.AvroGenerated
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<ShopOrder>
    implements org.apache.avro.data.RecordBuilder<ShopOrder> {

    private java.util.UUID id;
    private java.lang.CharSequence nameShop;
    private java.lang.CharSequence address;
    private java.lang.CharSequence city;
    private java.lang.CharSequence cp;
    private com.gallegos.shop.domain.generated.Client client;
    private com.gallegos.shop.domain.generated.Client.Builder clientBuilder;
    private java.util.List<com.gallegos.shop.domain.generated.Item> items;
    private float totalPrice;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$, MODEL$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(com.gallegos.shop.domain.generated.ShopOrder.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.id)) {
        this.id = data().deepCopy(fields()[0].schema(), other.id);
        fieldSetFlags()[0] = other.fieldSetFlags()[0];
      }
      if (isValidValue(fields()[1], other.nameShop)) {
        this.nameShop = data().deepCopy(fields()[1].schema(), other.nameShop);
        fieldSetFlags()[1] = other.fieldSetFlags()[1];
      }
      if (isValidValue(fields()[2], other.address)) {
        this.address = data().deepCopy(fields()[2].schema(), other.address);
        fieldSetFlags()[2] = other.fieldSetFlags()[2];
      }
      if (isValidValue(fields()[3], other.city)) {
        this.city = data().deepCopy(fields()[3].schema(), other.city);
        fieldSetFlags()[3] = other.fieldSetFlags()[3];
      }
      if (isValidValue(fields()[4], other.cp)) {
        this.cp = data().deepCopy(fields()[4].schema(), other.cp);
        fieldSetFlags()[4] = other.fieldSetFlags()[4];
      }
      if (isValidValue(fields()[5], other.client)) {
        this.client = data().deepCopy(fields()[5].schema(), other.client);
        fieldSetFlags()[5] = other.fieldSetFlags()[5];
      }
      if (other.hasClientBuilder()) {
        this.clientBuilder = com.gallegos.shop.domain.generated.Client.newBuilder(other.getClientBuilder());
      }
      if (isValidValue(fields()[6], other.items)) {
        this.items = data().deepCopy(fields()[6].schema(), other.items);
        fieldSetFlags()[6] = other.fieldSetFlags()[6];
      }
      if (isValidValue(fields()[7], other.totalPrice)) {
        this.totalPrice = data().deepCopy(fields()[7].schema(), other.totalPrice);
        fieldSetFlags()[7] = other.fieldSetFlags()[7];
      }
    }

    /**
     * Creates a Builder by copying an existing ShopOrder instance
     * @param other The existing instance to copy.
     */
    private Builder(com.gallegos.shop.domain.generated.ShopOrder other) {
      super(SCHEMA$, MODEL$);
      if (isValidValue(fields()[0], other.id)) {
        this.id = data().deepCopy(fields()[0].schema(), other.id);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.nameShop)) {
        this.nameShop = data().deepCopy(fields()[1].schema(), other.nameShop);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.address)) {
        this.address = data().deepCopy(fields()[2].schema(), other.address);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.city)) {
        this.city = data().deepCopy(fields()[3].schema(), other.city);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.cp)) {
        this.cp = data().deepCopy(fields()[4].schema(), other.cp);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.client)) {
        this.client = data().deepCopy(fields()[5].schema(), other.client);
        fieldSetFlags()[5] = true;
      }
      this.clientBuilder = null;
      if (isValidValue(fields()[6], other.items)) {
        this.items = data().deepCopy(fields()[6].schema(), other.items);
        fieldSetFlags()[6] = true;
      }
      if (isValidValue(fields()[7], other.totalPrice)) {
        this.totalPrice = data().deepCopy(fields()[7].schema(), other.totalPrice);
        fieldSetFlags()[7] = true;
      }
    }

    /**
      * Gets the value of the 'id' field.
      * @return The value.
      */
    public java.util.UUID getId() {
      return id;
    }


    /**
      * Sets the value of the 'id' field.
      * @param value The value of 'id'.
      * @return This builder.
      */
    public com.gallegos.shop.domain.generated.ShopOrder.Builder setId(java.util.UUID value) {
      validate(fields()[0], value);
      this.id = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'id' field has been set.
      * @return True if the 'id' field has been set, false otherwise.
      */
    public boolean hasId() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'id' field.
      * @return This builder.
      */
    public com.gallegos.shop.domain.generated.ShopOrder.Builder clearId() {
      id = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'nameShop' field.
      * @return The value.
      */
    public java.lang.CharSequence getNameShop() {
      return nameShop;
    }


    /**
      * Sets the value of the 'nameShop' field.
      * @param value The value of 'nameShop'.
      * @return This builder.
      */
    public com.gallegos.shop.domain.generated.ShopOrder.Builder setNameShop(java.lang.CharSequence value) {
      validate(fields()[1], value);
      this.nameShop = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'nameShop' field has been set.
      * @return True if the 'nameShop' field has been set, false otherwise.
      */
    public boolean hasNameShop() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'nameShop' field.
      * @return This builder.
      */
    public com.gallegos.shop.domain.generated.ShopOrder.Builder clearNameShop() {
      nameShop = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'address' field.
      * @return The value.
      */
    public java.lang.CharSequence getAddress() {
      return address;
    }


    /**
      * Sets the value of the 'address' field.
      * @param value The value of 'address'.
      * @return This builder.
      */
    public com.gallegos.shop.domain.generated.ShopOrder.Builder setAddress(java.lang.CharSequence value) {
      validate(fields()[2], value);
      this.address = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'address' field has been set.
      * @return True if the 'address' field has been set, false otherwise.
      */
    public boolean hasAddress() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'address' field.
      * @return This builder.
      */
    public com.gallegos.shop.domain.generated.ShopOrder.Builder clearAddress() {
      address = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'city' field.
      * @return The value.
      */
    public java.lang.CharSequence getCity() {
      return city;
    }


    /**
      * Sets the value of the 'city' field.
      * @param value The value of 'city'.
      * @return This builder.
      */
    public com.gallegos.shop.domain.generated.ShopOrder.Builder setCity(java.lang.CharSequence value) {
      validate(fields()[3], value);
      this.city = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'city' field has been set.
      * @return True if the 'city' field has been set, false otherwise.
      */
    public boolean hasCity() {
      return fieldSetFlags()[3];
    }


    /**
      * Clears the value of the 'city' field.
      * @return This builder.
      */
    public com.gallegos.shop.domain.generated.ShopOrder.Builder clearCity() {
      city = null;
      fieldSetFlags()[3] = false;
      return this;
    }

    /**
      * Gets the value of the 'cp' field.
      * @return The value.
      */
    public java.lang.CharSequence getCp() {
      return cp;
    }


    /**
      * Sets the value of the 'cp' field.
      * @param value The value of 'cp'.
      * @return This builder.
      */
    public com.gallegos.shop.domain.generated.ShopOrder.Builder setCp(java.lang.CharSequence value) {
      validate(fields()[4], value);
      this.cp = value;
      fieldSetFlags()[4] = true;
      return this;
    }

    /**
      * Checks whether the 'cp' field has been set.
      * @return True if the 'cp' field has been set, false otherwise.
      */
    public boolean hasCp() {
      return fieldSetFlags()[4];
    }


    /**
      * Clears the value of the 'cp' field.
      * @return This builder.
      */
    public com.gallegos.shop.domain.generated.ShopOrder.Builder clearCp() {
      cp = null;
      fieldSetFlags()[4] = false;
      return this;
    }

    /**
      * Gets the value of the 'client' field.
      * @return The value.
      */
    public com.gallegos.shop.domain.generated.Client getClient() {
      return client;
    }


    /**
      * Sets the value of the 'client' field.
      * @param value The value of 'client'.
      * @return This builder.
      */
    public com.gallegos.shop.domain.generated.ShopOrder.Builder setClient(com.gallegos.shop.domain.generated.Client value) {
      validate(fields()[5], value);
      this.clientBuilder = null;
      this.client = value;
      fieldSetFlags()[5] = true;
      return this;
    }

    /**
      * Checks whether the 'client' field has been set.
      * @return True if the 'client' field has been set, false otherwise.
      */
    public boolean hasClient() {
      return fieldSetFlags()[5];
    }

    /**
     * Gets the Builder instance for the 'client' field and creates one if it doesn't exist yet.
     * @return This builder.
     */
    public com.gallegos.shop.domain.generated.Client.Builder getClientBuilder() {
      if (clientBuilder == null) {
        if (hasClient()) {
          setClientBuilder(com.gallegos.shop.domain.generated.Client.newBuilder(client));
        } else {
          setClientBuilder(com.gallegos.shop.domain.generated.Client.newBuilder());
        }
      }
      return clientBuilder;
    }

    /**
     * Sets the Builder instance for the 'client' field
     * @param value The builder instance that must be set.
     * @return This builder.
     */

    public com.gallegos.shop.domain.generated.ShopOrder.Builder setClientBuilder(com.gallegos.shop.domain.generated.Client.Builder value) {
      clearClient();
      clientBuilder = value;
      return this;
    }

    /**
     * Checks whether the 'client' field has an active Builder instance
     * @return True if the 'client' field has an active Builder instance
     */
    public boolean hasClientBuilder() {
      return clientBuilder != null;
    }

    /**
      * Clears the value of the 'client' field.
      * @return This builder.
      */
    public com.gallegos.shop.domain.generated.ShopOrder.Builder clearClient() {
      client = null;
      clientBuilder = null;
      fieldSetFlags()[5] = false;
      return this;
    }

    /**
      * Gets the value of the 'items' field.
      * @return The value.
      */
    public java.util.List<com.gallegos.shop.domain.generated.Item> getItems() {
      return items;
    }


    /**
      * Sets the value of the 'items' field.
      * @param value The value of 'items'.
      * @return This builder.
      */
    public com.gallegos.shop.domain.generated.ShopOrder.Builder setItems(java.util.List<com.gallegos.shop.domain.generated.Item> value) {
      validate(fields()[6], value);
      this.items = value;
      fieldSetFlags()[6] = true;
      return this;
    }

    /**
      * Checks whether the 'items' field has been set.
      * @return True if the 'items' field has been set, false otherwise.
      */
    public boolean hasItems() {
      return fieldSetFlags()[6];
    }


    /**
      * Clears the value of the 'items' field.
      * @return This builder.
      */
    public com.gallegos.shop.domain.generated.ShopOrder.Builder clearItems() {
      items = null;
      fieldSetFlags()[6] = false;
      return this;
    }

    /**
      * Gets the value of the 'totalPrice' field.
      * @return The value.
      */
    public float getTotalPrice() {
      return totalPrice;
    }


    /**
      * Sets the value of the 'totalPrice' field.
      * @param value The value of 'totalPrice'.
      * @return This builder.
      */
    public com.gallegos.shop.domain.generated.ShopOrder.Builder setTotalPrice(float value) {
      validate(fields()[7], value);
      this.totalPrice = value;
      fieldSetFlags()[7] = true;
      return this;
    }

    /**
      * Checks whether the 'totalPrice' field has been set.
      * @return True if the 'totalPrice' field has been set, false otherwise.
      */
    public boolean hasTotalPrice() {
      return fieldSetFlags()[7];
    }


    /**
      * Clears the value of the 'totalPrice' field.
      * @return This builder.
      */
    public com.gallegos.shop.domain.generated.ShopOrder.Builder clearTotalPrice() {
      fieldSetFlags()[7] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public ShopOrder build() {
      try {
        ShopOrder record = new ShopOrder();
        record.id = fieldSetFlags()[0] ? this.id : (java.util.UUID) defaultValue(fields()[0]);
        record.nameShop = fieldSetFlags()[1] ? this.nameShop : (java.lang.CharSequence) defaultValue(fields()[1]);
        record.address = fieldSetFlags()[2] ? this.address : (java.lang.CharSequence) defaultValue(fields()[2]);
        record.city = fieldSetFlags()[3] ? this.city : (java.lang.CharSequence) defaultValue(fields()[3]);
        record.cp = fieldSetFlags()[4] ? this.cp : (java.lang.CharSequence) defaultValue(fields()[4]);
        if (clientBuilder != null) {
          try {
            record.client = this.clientBuilder.build();
          } catch (org.apache.avro.AvroMissingFieldException e) {
            e.addParentField(record.getSchema().getField("client"));
            throw e;
          }
        } else {
          record.client = fieldSetFlags()[5] ? this.client : (com.gallegos.shop.domain.generated.Client) defaultValue(fields()[5]);
        }
        record.items = fieldSetFlags()[6] ? this.items : (java.util.List<com.gallegos.shop.domain.generated.Item>) defaultValue(fields()[6]);
        record.totalPrice = fieldSetFlags()[7] ? this.totalPrice : (java.lang.Float) defaultValue(fields()[7]);
        return record;
      } catch (org.apache.avro.AvroMissingFieldException e) {
        throw e;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<ShopOrder>
    WRITER$ = (org.apache.avro.io.DatumWriter<ShopOrder>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<ShopOrder>
    READER$ = (org.apache.avro.io.DatumReader<ShopOrder>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

}










